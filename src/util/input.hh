#pragma once

#include <unordered_map>
#include <vector>
#include <functional>

namespace Input
{
	enum struct Action
	{
		MOVE_FORWARD,
		MOVE_BACK,
		MOVE_LEFT,
		MOVE_RIGHT,
		MOVE_UP,
		MOVE_DOWN,
		JUMP,
	};
	
	enum struct Key
	{
		KEY_UNKNOWN = 0,
		
		KEY_A = 4,
		KEY_B = 5,
		KEY_C = 6,
		KEY_D = 7,
		KEY_E = 8,
		KEY_F = 9,
		KEY_G = 10,
		KEY_H = 11,
		KEY_I = 12,
		KEY_J = 13,
		KEY_K = 14,
		KEY_L = 15,
		KEY_M = 16,
		KEY_N = 17,
		KEY_O = 18,
		KEY_P = 19,
		KEY_Q = 20,
		KEY_R = 21,
		KEY_S = 22,
		KEY_T = 23,
		KEY_U = 24,
		KEY_V = 25,
		KEY_W = 26,
		KEY_X = 27,
		KEY_Y = 28,
		KEY_Z = 29,
		
		
		//Numbers
				KEY_1 = 30,
		KEY_2 = 31,
		KEY_3 = 32,
		KEY_4 = 33,
		KEY_5 = 34,
		KEY_6 = 35,
		KEY_7 = 36,
		KEY_8 = 37,
		KEY_9 = 38,
		KEY_0 = 39,
		
		KEY_RETURN = 40,
		KEY_ESC = 41,
		KEY_BACKSPACE = 42,
		KEY_TAB = 43,
		KEY_SPACE = 44,
		KEY_MINUS = 45,
		KEY_EQUALS = 46,
		KEY_LBRACKET = 47,
		KEY_RBRACKET = 48,
		KEY_BSLASH = 49,
		KEY_NONUSHASH = 50,
		KEY_SEMICOLON = 51,
		KEY_APOSTRAPHE = 52,
		KEY_GRAVE = 53, //backtick
		KEY_COMMA = 54,
		KEY_PERIOD = 55,
		KEY_FSLASH = 56,
		KEY_CAPSLCK = 57,
		KEY_F1 = 58,
		KEY_F2 = 59,
		KEY_F3 = 60,
		KEY_F4 = 61,
		KEY_F5 = 62,
		KEY_F6 = 63,
		KEY_F7 = 64,
		KEY_F8 = 65,
		KEY_F9 = 66,
		KEY_F10 = 67,
		KEY_F11 = 68,
		KEY_F12 = 69,
		KEY_PRNTSCRN = 70,
		KEY_SCRLLCK = 71,
		KEY_PAUSE = 72,
		KEY_INSERT = 73,
		KEY_HOME = 74,
		KEY_PGUP = 75,
		KEY_DEL = 76,
		KEY_END = 77,
		KEY_PGDOWN = 78,
		KEY_RARROW = 79,
		KEY_LARROW = 80,
		KEY_DARROW = 81,
		KEY_UARROW = 82,
		KEY_NUMLCK = 83,
		KP_DIV = 84,
		KP_MULT = 85,
		KP_MINUS = 86,
		KP_PLUS = 87,
		KP_ENTER = 88,
		KP_1 = 89,
		KP_2 = 90,
		KP_3 = 91,
		KP_4 = 92,
		KP_5 = 93,
		KP_6 = 94,
		KP_7 = 95,
		KP_8 = 96,
		KP_9 = 97,
		KP_0 = 98,
		KP_PERIOD = 99,
		KEY_NONUSBACKSLASH = 100,
		KEY_APP = 101, //The windows key
		KEY_POWER = 102,
		KP_EQUALS = 103,
		KEY_F13 = 104,
		KEY_F14 = 105,
		KEY_F15 = 106,
		KEY_F16 = 107,
		KEY_F17 = 108,
		KEY_F18 = 109,
		KEY_F19 = 110,
		KEY_F20 = 111,
		KEY_F21 = 112,
		KEY_F22 = 113,
		KEY_F23 = 114,
		KEY_F24 = 115,
		KEY_EXECUTE = 116,
		KEY_HELP = 117,
		KEY_MENU = 118,
		KEY_SELECT = 119,
		KEY_STOP = 120,
		KEY_AGAIN = 121,
		KEY_UNDO = 122,
		KEY_CUT = 123,
		KEY_COPY = 124,
		KEY_PASTE = 125,
		KEY_FIND = 126,
		KEY_MUTE = 127,
		KEY_VOLUMEUP = 128,
		KEY_VOLUMEDOWN = 129,
		KP_COMMA = 133,
		KP_EQUALSAS400 = 134,
		KEY_INTERNATIONAL1 = 135,
		KEY_INTERNATIONAL2 = 136,
		KEY_INTERNATIONAL3 = 137,
		KEY_INTERNATIONAL4 = 138,
		KEY_INTERNATIONAL5 = 139,
		KEY_INTERNATIONAL6 = 140,
		KEY_INTERNATIONAL7 = 141,
		KEY_INTERNATIONAL8 = 142,
		KEY_INTERNATIONAL9 = 143,
		KEY_LANG1 = 144,
		KEY_LANG2 = 145,
		KEY_LANG3 = 146,
		KEY_LANG4 = 147,
		KEY_LANG5 = 148,
		KEY_LANG6 = 149,
		KEY_LANG7 = 150,
		KEY_LANG8 = 151,
		KEY_LANG9 = 152,
		KEY_ALTERASE = 153,
		KEY_SYSREQ = 154,
		KEY_CANCEL = 155,
		KEY_CLEAR = 156,
		KEY_PRIOR = 157,
		KEY_RETURN2 = 158,
		KEY_SEPARATOR = 159,
		KEY_OUT = 160,
		KEY_OPER = 161,
		KEY_CLEARAGAIN = 162,
		KEY_CRSEL = 163,
		KEY_EXSEL = 164,
		KP_00 = 176,
		KP_000 = 177,
		KEY_THOUSANDSSEPARATOR = 178,
		KEY_DECIMALSEPARATOR = 179,
		KEY_CURRENCYUNIT = 180,
		KEY_CURRENCYSUBUNIT = 181,
		KP_LEFTPAREN = 182,
		KP_RIGHTPAREN = 183,
		KP_LEFTBRACE = 184,
		KP_RIGHTBRACE = 185,
		KP_TAB = 186,
		KP_BACKSPACE = 187,
		KP_A = 188,
		KP_B = 189,
		KP_C = 190,
		KP_D = 191,
		KP_E = 192,
		KP_F = 193,
		KP_XOR = 194,
		KP_POWER = 195,
		KP_PERCENT = 196,
		KP_LESS = 197,
		KP_GREATER = 198,
		KP_AMPERSAND = 199,
		KP_DBLAMPERSAND = 200,
		KP_VERTICALBAR = 201,
		KP_DBLVERTICALBAR = 202,
		KP_COLON = 203,
		KP_HASH = 204,
		KP_SPACE = 205,
		KP_AT = 206,
		KP_EXCLAM = 207,
		KP_MEMSTORE = 208,
		KP_MEMRECALL = 209,
		KP_MEMCLEAR = 210,
		KP_MEMADD = 211,
		KP_MEMSUBTRACT = 212,
		KP_MEMMULTIPLY = 213,
		KP_MEMDIVIDE = 214,
		KP_PLUSMINUS = 215,
		KP_CLEAR = 216,
		KP_CLEARENTRY = 217,
		KP_BINARY = 218,
		KP_OCTAL = 219,
		KP_DECIMAL = 220,
		KP_HEXADECIMAL = 221,
		KEY_LCTRL = 224,
		KEY_LSHIFT = 225,
		KEY_LALT = 226,
		KEY_LGUI = 227,
		KEY_RCTRL = 228,
		KEY_RSHIFT = 229,
		KEY_RALT = 230,
		KEY_RGUI = 231,
		KEY_MODE = 257,
		KEY_AUDIONEXT = 258,
		KEY_AUDIOPREV = 259,
		KEY_AUDIOSTOP = 260,
		KEY_AUDIOPLAY = 261,
		KEY_AUDIOMUTE = 262,
		KEY_MEDIASELECT = 263,
		KEY_WWW = 264,
		KEY_MAIL = 265,
		KEY_CALCULATOR = 266,
		KEY_COMPUTER = 267,
		AC_SEARCH = 268,
		AC_HOME = 269,
		AC_BACK = 270,
		AC_FORWARD = 271,
		AC_STOP = 272,
		AC_REFRESH = 273,
		AC_BOOKMARKS = 274,
		LAPTOP_BRIGHTNESSDOWN = 275,
		LAPTOP_BRIGHTNESSUP = 276,
		LAPTOP_DISPLAYSWITCH = 277,
		LAPTOP_KBDILLUMTOGGLE = 278,
		LAPTOP_KBDILLUMDOWN = 279,
		LAPTOP_KBDILLUMUP = 280,
		LAPTOP_EJECT = 281,
		LAPTOP_SLEEP = 282,
		LAPTOP_APP1 = 283,
		LAPTOP_APP2 = 284,
	};
	
	struct TriggerModePair
	{
		Key key;
		std::function<void (bool)> callback;
	};
	
	enum struct KeybindType
	{
		IMMEDIATE, TRIGGER
	};
	
	void init();
	void updateImmediateModeKbd();
	void bindImmediateModeKey(Key key, Action action);
	void bindTriggerModeKey(Key key, std::function<void (bool)> callback);
	Action getBoundAction(Key key);
	Key getBoundKey(Action action);
	
	extern std::unordered_map<Action, bool> immediateModeKeystates;
	extern std::unordered_map<Action, double> pressLength;
	extern std::vector<TriggerModePair> triggerModeKeybinds;
}
#define Keys Input::Key
#define Actions Input::Action
